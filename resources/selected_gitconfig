[user]
	name  = 
	email = 

[alias]

# LOG aliases
# Timeline of commits; history of commits

# --graph    : renders a graph with nodes and vertices
# --oneline  : formats each node/commit in a single line rendering commit's message 'header' (1st line)
# --decorate : display all the references (e.g., branches, tags, etc) that point to each commit
# --all      : display information about remote refs (ie branches, tags) too
# --stat     : display additions and deletions per changed file and total changes stats

# --full-history

# Graph of commits

# Render each commit in a single line
  l              = log --graph --decorate --color --oneline
  la             = log --graph --decorate --color --oneline --all
  ls             = log --graph --decorate --color --stat --oneline

# Render each commit's full hash, full message, author, date; covers multiple lines
  lv             = log --graph --decorate --color
  lsv            = log --graph --decorate --color --stat
  lvs            = log --graph --decorate --color --stat

# stats of local and remote 
  las            = log --graph --decorate --color --oneline --all --stat
  lsa            = log --graph --decorate --color --oneline --all --stat

  # Verbose version of the above.
  # Most possible info (remote, local, full commit message, full hash)
  lasv           = log --graph --decorate --color --all --stat
  lsav           = log --graph --decorate --color --all --stat

  lav            = log --graph --decorate --color --all
  lva            = log --graph --decorate --color --all
  

# like l alias plus it includes dates and author information per node/commit 
  lp             = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  lps            = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --stat
  lsp            = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --stat

  lpa            = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all
  lap            = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all

  lasp           = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all --stat


# Status of working tree; changed files, untracked files; index status
  st             = status
  stu            = status -uno

# Git Commit shortcuts (aliases)
  cm             = commit -m
  ca		         = commit --amend

# Other git commands
# show the root directory of this repository
  root           = rev-parse --show-toplevel
  dn             = diff --name-only
  ds             = diff --stat
  ch             = checkout

# Show files in tree
  # show all tracked files for current branch
  files-tracked  = "!sh -c \"git ls-tree -r HEAD --name-only\" -"s

  # show all files that ever existed (ie including deleted files)
  files-existed  = "!sh -c \"git log --pretty=format: --name-only --diff-filter=A | sort - | sed '/^$/d'\" -"s

  # show all tracked files for given reference (eg branch, commit, tag)
  # 1st arg: object reference
  ref-files-tracked  = "!sh -c \"git ls-tree -r $1 --name-only\" -"s


  # Branches
  br		         = branch
  # move a branch pointer to a any commit without checkout
  # 1st arg: branch name
  # 2nd arg: commit sha
  move-branch    = "!sh -c \"git branch -f $1 $2\" -"s
  # move a branch pointer to the current commit (without checkout)
  # 1st arg: branch name
  move-branch-here    = "!sh -c \"git branch -f $1 HEAD\" -"s

  # Push a branch to the 'origin' remote (and setup 'tracking' if necessary)
  # push & track a local branch to be able to auto pull/push onwards:
  # git will remember the subject branch, when invoking 'git push' or 'git pull'
  # 1st arg: branch name
  push-n-track    = "!sh -c \"git push -u origin $1\" -"s
  # Push current branch to the 'origin' remote (and setup 'tracking' if necessary)
  push-n-track-me = "!sh -c \"git push -u origin HEAD\" -"s

  mirror-n-track = "!sh -c \"git branch --track $1 origin/$1\" -"s # "copy" remote branch to create identical local and track

  # Delete a branch on the 'origin' remote (use with caution!)
  # 1st arg: branch name (no need to include the 'origin':
  # eg correct input: temp-branch; incorrect input: origin/temp-branch
  del-remote     = "!sh -c \"git push origin --delete $1\" -"s

  # Tagging
  tag-annotated  = "!sh -c \"git tag -a $1 -m $2\" -"s

  # Push a tag to a remote repository
  # 1st arg: tag reference
  push-tag     	  = "!sh -c \"git push origin $1\" -"s

  # Push all tags to a remote repository
  push-all-tags   = push --tags origin

  # Delete local tag
  del-tag = "!sh -c \"git tag -d $1\" -"s

  # Delete remote tag
  del-remote-tag = "!sh -c \"git push --delete origin $1\" -"s


  # Setting file to past state
  # 1st arg: commit hash
  # 2nd arg: file path
  set-file-to-state  = "!sh -c \"git checkout $1 -- $2\" -"s

  # Remove accidentally commited file, but keep on disk
  # 1st arg: file path
  uncommit      = "!sh -c \"git rm --cached $1 && git commit -m 'chore: uncommit file'\" -"s


  # STATS
  # Number of commits for each user (groups per author)
  stats         = git shortlog -sn --all

  # Number of commits for each user (groups per commiter)
  stats-c         = git shortlog -snc --all
  
  # show email
  stats-e       = git shortlog -sne --all
  stats-ce      = git shortlog -snce --all


  # TODO: test below
  # git log --author="authorsname" --format=tformat: --numstat | q -t "select sum(c1), sum(c2) from -"


[branch]
	autosetuprebase = always
	autosetupmerge = true
[push]
	default = current
[core]
	editor = code --wait
[color]
	ui = true
[fetch]
	prune = true
[diff]
	mnemonicprefix = true
	renames = copies
[advice]
        pushNonFastForward = false  # if pushing is blocked, just force fast forward (i.e. git push -f)
[rerere]
	enabled = true
[diff]
    tool = default-difftool
[difftool "default-difftool"]
    cmd = code --wait --diff $LOCAL $REMOTE
